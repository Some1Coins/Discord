// commands/removecrypto.js
const { EmbedBuilder } = require('discord.js');
const { CryptoAddress } = require('../models/CryptoAddress');


// ID du canal de logs (extrait de l'URL fournie)
const logChannelId = '1275544164624371833';

module.exports = {
    name: 'removecrypto',
    description: 'Supprime une adresse crypto de la base de donn√©es.',
    async execute(message) {
        const addresses = await CryptoAddress.findAll();

        if (addresses.length === 0) {
            const noAddressesEmbed = new EmbedBuilder()
                .setColor(0xffa500)
                .setDescription('üìã **__Aucune adresse enregistr√©e__**\n\nIl n\'y a aucune adresse crypto enregistr√©e pour le moment.');
            return message.reply({ embeds: [noAddressesEmbed] });
        }

        const embed = new EmbedBuilder()
            .setColor(0xff0000)
            .setTitle('__**üóëÔ∏è Supprimer une adresse crypto**__')
            .setDescription(
                'Voici la liste des adresses crypto enregistr√©es.\n\n' +
                'Cliquez sur la r√©action correspondante pour s√©lectionner l\'adresse √† supprimer.'
            );

        addresses.forEach((address, index) => {
            embed.addFields({ name: `Adresse ${index + 1}`, value: `\`${address.address}\``, inline: false });
        });

        const embedMessage = await message.channel.send({ embeds: [embed] });

        const emojiNumbers = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü'];

        for (let i = 0; i < addresses.length && i < emojiNumbers.length; i++) {
            await embedMessage.react(emojiNumbers[i]);
        }

        const filter = (reaction, user) => {
            return emojiNumbers.includes(reaction.emoji.name) && user.id === message.author.id;
        };

        const collector = embedMessage.createReactionCollector({ filter, time: 60000 });

        collector.on('collect', async (reaction, user) => {
            const index = emojiNumbers.indexOf(reaction.emoji.name);

            if (index !== -1 && addresses[index]) {
                const address = addresses[index].address;

                // Confirmation via r√©action
                const confirmEmbed = new EmbedBuilder()
                    .setColor(0xffcc00)
                    .setDescription(`‚ùó **__Confirmation__**\n\n√ätes-vous s√ªr de vouloir supprimer l'adresse \`${address}\` ?\n\nCliquez sur ‚úÖ pour confirmer ou sur ‚ùå pour annuler.`);

                const confirmMessage = await message.reply({ embeds: [confirmEmbed] });
                await confirmMessage.react('‚úÖ');
                await confirmMessage.react('‚ùå');

                const confirmFilter = (reaction, user) => {
                    return ['‚úÖ', '‚ùå'].includes(reaction.emoji.name) && user.id === message.author.id;
                };

                const confirmCollector = confirmMessage.createReactionCollector({ filter: confirmFilter, max: 1, time: 30000 });

                confirmCollector.on('collect', async (reaction) => {
                    if (reaction.emoji.name === '‚úÖ') {
                        await CryptoAddress.destroy({ where: { address } });

                        const successEmbed = new EmbedBuilder()
                            .setColor(0x00ff00)
                            .setDescription(`‚úÖ **__Adresse supprim√©e__**\n\nL'adresse \`${address}\` a √©t√© supprim√©e de la base de donn√©es.`);
                        await message.reply({ embeds: [successEmbed] });

                        // Enregistrement dans l'historique des logs
                        const logEmbed = new EmbedBuilder()
                            .setColor(0x95a5a6)
                            .setDescription(`üóëÔ∏è **__Suppression d'adresse__**\n\nL'utilisateur **${message.author.tag}** a supprim√© l'adresse \`${address}\`.`);

                        const logChannel = message.guild.channels.cache.get(logChannelId);
                        if (logChannel) logChannel.send({ embeds: [logEmbed] });

                    } else {
                        const cancelEmbed = new EmbedBuilder()
                            .setColor(0x3498db)
                            .setDescription('üö´ **__Annul√©__**\n\nLa suppression de l\'adresse a √©t√© annul√©e.');
                        await message.reply({ embeds: [cancelEmbed] });
                    }
                });

                confirmCollector.on('end', () => {
                    confirmMessage.reactions.removeAll().catch(error => console.error('Failed to clear reactions: ', error));
                });
            }
        });

        collector.on('end', () => {
            embedMessage.reactions.removeAll().catch(error => console.error('Failed to clear reactions: ', error));
        });
    },
};
